import os
import econpizza as ep
def initialize_data():

    """
        Initialize and return various data structures related to economic models and variables.

        This function sets up the following data:
        - Lists of economic variables and their corresponding clean versions.
        - Lists of variable names in readable formats (with and without additional context).
        - A dictionary of styles for different models.
        - Groupings of models for comparative analysis.
        - Groupings of taxes related to home and foreign countries.
        - Groupings of variables for organizational purposes.
        - Dictionaries mapping variables to their readable names.

        Returns:
            tuple: A tuple containing the following elements:
                - variable_title_dict (dict): A dictionary mapping each variable to its descriptive name.
                - variable_title_dict_clean (dict): A dictionary mapping each clean variable to its descriptive name.
                - variables (tuple): A tuple of all economic variables.
                - variables_clean (tuple): A tuple of clean economic variables.
                - var_nameslab_clean (tuple): A tuple of descriptive names for clean economic variables.
                - var_nameslab (tuple): A tuple of descriptive names for all economic variables.
                - model_styles (dict): A dictionary defining the styles for different models.
                - model_groups (list): A list of dictionaries defining different model groups.
                - taxes_groups (list): A list of dictionaries defining groups based on home and foreign taxes.
                - taxes (tuple): A tuple of tax-related variables.
                - group1 (tuple): A tuple of the first group of economic variables.
                - group2 (tuple): A tuple of the second group of economic variables.
                - group3 (tuple): A tuple of the third group of economic variables.
                - group1_clean (tuple): A tuple of the first group of clean economic variables.
                - group2_clean (tuple): A tuple of the second group of clean economic variables.
    """


    variables = (
        "d", "dstar", "c", "cstar", "piH", "piF", "pi", "pistar", "y", "ystar",
        "q", "pH", "pF", "rn", "gH", "gF", "ny", "nystar", "L", "Lstar",
        "w", "wstar", "sH", "sF", "kbar", "kbarstar", "k", "kstar", "i", "istar",
        "u", "ustar", "rk", "rkstar"
    )

    variables_clean = (
        "c", "cstar", "piH", "piF", "pi", "pistar", "y", "ystar",
        "q", "pH", "pF", "rn", "L", "Lstar",
        "w", "wstar", "sH", "sF", "k", "kstar", "i", "istar",
        "rk", "rkstar"
    )

    var_nameslab_clean = (
        "Home Consumption",
        "Foreign Consumption",
        "Inflation generated by H", "Inflation generated by F", "Home Inflation", "Foreign Inflation", "Home Output",
        "Foreign Output", "Real Exchange Rate",
        "Home Price Level", "Foreign Price Level", "Natural Interest Rate",
        "Home Labor", "Foreign Labor",
        "Home Real Wages", "Foreign Real Wages", "Home Marginal Cost", "Foreign Marginal Cost",
        "Home Capital", "Foreign Capital", "Home Investment", "Foreign Investment",
        "Home Rental Rate of Capital", "Foreign Rental Rate of Capital"
    )

    var_nameslab = (
        "Home shadow value of installed capital", "Foreign shadow value of installed capital", "Home Consumption",
        "Foreign Consumption",
        "Inflation generated by H", "Inflation generated by F", "Home Inflation", "Foreign Inflation", "Home Output",
        "Foreign Output",
        "Exchange Rate", "Home Price Level", "Foreign Price Level", "Natural Interest Rate", "Home Government Spending",
        "Foreign Government Spending",
        "Home Nominal Output", "Foreign Nominal Output", "Home Labor", "Foreign Labor",
        "Home Wages", "Foreign Wages", "Home Marginal Cost", "Foreign Marginal Cost", "Home Physical Capital",
        "Foreign Physical Capital",
        "Home Capital", "Foreign Capital", "Home Investment", "Foreign Investment",
        "Home Utilization", "Foreign Utilization", "Home Rental Rate of Capital", "Foreign Rental Rate of Capital"
    )

    model_styles = {
        'mod_labls': {'linestyle': '-', 'color': 'blue', 'label': 'labor tax only in H'},
        'mod_HbiggerF': {'linestyle': '-', 'color': 'green', 'label': 'labor tax in both H>F'},
        'mod_FbiggerH': {'linestyle': '-', 'color': 'red', 'label': 'labor tax in both H<F'},
        'mod_lsls': {'linestyle': '-', 'color': 'cyan', 'label': 'lump-sum tax in both countries'},
        'mod_lablab': {'linestyle': '-', 'color': 'lightcoral', 'label': 'labor tax in both countries'},
        'mod_lslab': {'linestyle': '-', 'color': 'gold', 'label': 'labor tax only in F'}
    }


    model_groups = [
        {
            'group_name': 'lumpsum_vs_labor',
            'models': ['mod_lsls', 'mod_lablab'],
        },
        {
            'group_name': 'labor_tax_in_one_country',
            'models': ['mod_labls', 'mod_lslab'],
        },
        {
            'group_name': 'asymmetric_labor_tax',
            'models': ['mod_HbiggerF', 'mod_FbiggerH'],
        },
        {
            'group_name': 'all_models',
            'models': ['mod_lsls', 'mod_lablab', 'mod_labls', 'mod_lslab', 'mod_HbiggerF', 'mod_FbiggerH'],
        }
    ]

    taxes_groups = [
        {
            'group_name': 'HOME TAXES',
            'models': ['mod_labls', 'mod_lablab', 'mod_HbiggerF', 'mod_FbiggerH'],
        },
        {
            'group_name': 'FOREIGN TAXES',
            'models': ['mod_lslab', 'mod_lablab', 'mod_HbiggerF', 'mod_FbiggerH'],
        },

    ]
    taxes = (
        "Th", "Tf"
    )
    group1 = variables[:15]
    group2 = variables[15:30]
    group3 = variables[30:]
    group1_clean = variables_clean[:12]
    group2_clean = variables_clean[12:]
    variable_title_dict = dict(zip(variables, var_nameslab))
    variable_title_dict_clean = dict(zip(variables_clean, var_nameslab_clean))
    return  variable_title_dict,variable_title_dict_clean,variables, variables_clean, var_nameslab_clean, var_nameslab, model_styles, model_groups, taxes_groups, taxes,group1,group2,group3,group1_clean,group2_clean


def run_models_with_shock():

    """
      Load and solve a set of DSGE models with a specified shock, then return the results.

      This function performs the following steps:
      1. Loads six different DSGE models from specified file paths.
      2. Solves for the steady state of each model.
      3. Applies a shock to each model and finds the resulting paths.
      4. Organizes the resulting data into dictionaries for easy access.

      Returns:
          tuple: A tuple containing the following elements:
              - model_data (dict): A dictionary mapping model names to their respective path data after the shock.
              - models (dict): A dictionary mapping model names to their loaded model objects.
              - mod_lsls: The loaded model object for the lump-sum tax in both countries model.
              - mod_lablab: The loaded model object for the labor tax in both countries model.
              - mod_lslab: The loaded model object for the lump-sum tax in home and labor tax in foreign model.
              - mod_labls: The loaded model object for the labor tax in home and lump-sum tax in foreign model.
              - mod_FbiggerH: The loaded model object for the labor tax in both countries, with foreign tax greater than home tax model.
              - mod_HbiggerF: The loaded model object for the labor tax in both countries, with home tax greater than foreign tax model.
    """

    model1 = "./models/dsge2countries-lumpsum-lumpsum.yml"
    model2 = "./models/dsge2countries-labor-labor.yml"
    model3 = "./models/dsge2countries-ls-labor.yml"
    model4 = "./models/dsge2countries-labor-ls.yml"
    model5 = "./models/dsge2countries-labor-labor - H BIGGER F.yml"
    model6 = "./models/dsge2countries-labor-labor - F BIGGER H.yml"
    shk = ('e_gH', .01)

    mod_lsls = ep.load(model1)
    _ = mod_lsls.solve_stst()

    mod_lablab = ep.load(model2)
    _ = mod_lablab.solve_stst()

    mod_lslab = ep.load(model3)
    _ = mod_lslab.solve_stst()

    mod_labls = ep.load(model4)
    _ = mod_labls.solve_stst()

    mod_HbiggerF = ep.load(model5)
    _ = mod_HbiggerF.solve_stst()

    mod_FbiggerH = ep.load(model6)
    _ = mod_FbiggerH.solve_stst()

    x, flag_x = mod_lsls.find_path(shock=shk)
    y, flag_y = mod_lablab.find_path(shock=shk)
    z, flag_z = mod_lslab.find_path(shock=shk)
    a, flag_a = mod_labls.find_path(shock=shk)
    b, flag_b = mod_FbiggerH.find_path(shock=shk)
    c, flag_c = mod_HbiggerF.find_path(shock=shk)

    model_data = {
        'mod_labls': a,
        'mod_HbiggerF': c,
        'mod_FbiggerH': b,
        'mod_lsls': x,
        'mod_lablab': y,
        'mod_lslab': z
    }
    models = {
        'mod_labls': mod_labls,
        'mod_HbiggerF': mod_HbiggerF,
        'mod_FbiggerH': mod_FbiggerH,
        'mod_lsls': mod_lsls,
        'mod_lablab': mod_lablab,
        'mod_lslab': mod_lslab
    }
    return model_data,models,mod_lsls,mod_lablab,mod_lslab,mod_labls,mod_FbiggerH,mod_HbiggerF

def create_plot_directories():

    """
        Create necessary directories for storing plots.

        This function defines three directories for storing different types of plots. It checks if these directories
        exist, and if not, creates them.

        Returns:
            tuple: A tuple containing the paths of the created directories:
                - plots_directory (str): The path to the main plots directory.
                - plots_directory2 (str): The path to the comprehensive plots directory.
                - plots_directory3 (str): The path to the appendix plots directory.
    """

    plots_directory = "plots"
    plots_directory2 = "plots/comprehensive_plots"
    plots_directory3 = "plots/plots_appendix"
    for directory in [plots_directory, plots_directory2, plots_directory3]:
        if not os.path.exists(directory):
            os.makedirs(directory)
    return plots_directory,plots_directory2,plots_directory3
